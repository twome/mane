{
  "libs": [],
  "settings": {
    "badgeCounter": false,
    "editorConfig": {
      "enableBasicAutocompletion": false,
      "enableLiveAutocompletion": true,
      "enableSnippets": true,
      "fontSize": 14,
      "highlightActiveLine": false,
      "keyboardHandler": false,
      "showPrintMargin": false,
      "tabSize": 2,
      "theme": "ace/theme/monokai",
      "useSoftTabs": true,
      "useWorker": false,
      "wrap": true
    },
    "supportBtn": true,
    "themesFolder": [
      "chrome",
      "clouds",
      "dawn",
      "dracula",
      "dreamweaver",
      "eclipse",
      "github",
      "monokai",
      "solarized_dark",
      "solarized_light",
      "textmate",
      "tomorrow",
      "tomorrow_night",
      "twilight"
    ],
    "version": 8
  },
  "sites": [
    {
      "compiledCss": "#sc-rec-bottom, #rhf, #nav-shop, #nav-recently-viewed, #nav-link-prime, #cart-item-recs, #nav-upnav, #cbcc_content_container, #cbcc_banner, #sc-new-upsell, .navFooterMoreOnAmazon {display: none!important;}a[href*=\"goldbox\"], a[href*=\"gift-cards\"], a[href*=\"nav_cs_gc\"], a[href*=\"treasuretruck\"] {display: none!important;}",
      "css": "#sc-rec-bottom,\n#rhf,\n#nav-shop, \n#nav-recently-viewed, \n#nav-link-prime,\n#cart-item-recs,\n#nav-upnav,\n#cbcc_content_container, \n#cbcc_banner, \n#sc-new-upsell, \n.navFooterMoreOnAmazon {\n\tdisplay: none;\n}\n\na[href*=\"goldbox\"],\na[href*=\"gift-cards\"],\na[href*=\"nav_cs_gc\"],\na[href*=\"treasuretruck\"] {\n\tdisplay: none;\n}",
      "id": "amazon.com*",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": true,
        "altJS": false,
        "autoImportant": true,
        "on": true
      }
    },
    {
      "compiledCss": ".advertisement {display: none!important;}.NewGridQuestionPage .AnswerBase {padding: 0.5em 1em!important; margin-bottom: 0.6em!important;}.BelowQuestionAddPrompt {display: none!important;}.Answer {background-color: rgb(250, 250, 250)!important; border: 1px solid rgba(0, 0, 0, 0.25)!important; border-radius: 5px!important; margin-bottom: 2em!important; padding: 1em!important;}.AnswerFooter > .bullet {display: none!important;}.AnswerFooter > span:first-child {display: none!important;}.AnswerHeader {margin-bottom: 1em!important;}.ContentPageFeed {display: none!important;}.ContentWrapper {margin-top: 1em!important; padding-top: 0px!important;}.CredibilityFacts {margin-top: 0.5em!important; font-size: 0.7rem!important; color: rgba(0, 0, 0, 0.5)!important;}.IdentityNameCredential {color: rgba(0, 0, 0, 0.4)!important; font-style: italic!important;}.QuestionArea, .header {margin-bottom: 0em!important;}.SiteHeader {display: none!important;}._layout_photo_wrapper {display: none!important;}._layout_text_wrapper {padding-left: 0px!important;}.answer_count {font-size: 1rem!important;}.answer_permalink {background-color: rgb(253, 250, 237)!important; border: 1px solid rgb(224, 209, 133)!important; border-radius: 999px!important; color: rgb(34, 34, 34)!important; font-size: 1.1em!important; font-weight: bold!important; padding: 0.2em 0.5em!important; vertical-align: middle!important;}.layout_2col_main {width: 100%!important;}.logged_out_related_questions_container {display: none!important;}.question_related {display: none!important;}.user {color: rgb(136, 136, 136)!important; font-weight: bold!important;}",
      "css": ".advertisement {\n\tdisplay: none;\n\tvisibility: none;\n}\n\n.NewGridQuestionPage .AnswerBase {\n\tpadding-top: 0.5em;\n\tpadding-left: 1em;\n\tpadding-right:1em;\n\tpadding-bottom: 0.5em;\n\tmargin-bottom: 0.6em;\n}\n\n.BelowQuestionAddPrompt {\n\tdisplay: none;\n}\n\n.Answer {\n    background-color: hsla(0,0%,98%,1);\n    border: 1px solid hsla(0,0%,0%,0.25);\n    border-radius: 5px;\n    margin-bottom: 2em;\n    padding-bottom: 1em;\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-top: 1em;\n}\n\n.AnswerFooter > .bullet {\n    display: none;\n}\n\n.AnswerFooter > span:first-child {\n    display: none;\n}\n\n.AnswerHeader {\n    margin-bottom: 1em;\n}\n\n.ContentPageFeed {\n    display: none;\n}\n\n.ContentWrapper {\n    margin-top: 1em;\n    padding-top: 0;\n}\n\n.CredibilityFacts {\n    margin-top: 0.5em;\n    font-size: 0.7rem;\n\t\tcolor: hsla(0,0%,0%,0.5);\n}\n\n.IdentityNameCredential {\n    color: hsla(0,0%,0%,0.4);\n    font-style: italic;\n}\n\n.QuestionArea, .header {\n    margin-bottom: 0em;\n}\n\n.SiteHeader {\n    display: none;\n}\n\n._layout_photo_wrapper {\n    display: none;\n}\n\n._layout_text_wrapper {\n    padding-left: 0;\n}\n\n.answer_count {\n    font-size: 1rem;\n}\n\n.answer_permalink {\n    background-color: hsla(50,80%,96%,1);\n    border: 1px solid hsla(50,60%,70%,1);\n    border-radius: 999px;\n    color: #222;\n    font-size: 1.1em;\n    font-weight: bold;\n    padding: 0.2em 0.5em;\n    vertical-align: middle;\n}\n\n.layout_2col_main {\n    width: 100%;\n}\n\n.logged_out_related_questions_container {\n    display: none;\n}\n\n.question_related {\n    display: none;\n}\n\n.user {\n    color: #888;\n    font-weight: bold;\n}",
      "id": "quora.com",
      "js": "let d = document\n\nlet getAncestorQuery = (startingElem, selector, ceilingElem)=>{\n\tceilingElem = ceilingElem || document.body\n\tlet targets = ceilingElem.querySelectorAll(selector)\n\tlet correctParent = null\n\tfor (let target of targets){\n\t\tif (target.contains(startingElem)){\n\t\t\treturn correctParent = target  \n\t\t}\n\t}\n\t\n\treturn correctParent\n}\n\nlet externalLinks = d.querySelectorAll('.UnifiedAnswerPagedList [id^=__] .external_link')\n\nexternalLinks.forEach((val)=>{\n\tif (val.innerHTML.trim().match(/^Learn more at/i)){\n\t\tlet adEl = getAncestorQuery(val, '.UnifiedAnswerPagedList')\n\t\tif (!adEl.classList.contains('PagedListFoo')){ \n\t\t\tadEl.classList.add('advertisement')\n\t\t}\n\t}\n})",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".NotJuicyEnough {background-color: rgb(255, 179, 189)!important; padding: 0.3em!important; font-style: italic!important; color: rgba(0, 0, 0, 0.4)!important; display: block!important; text-align: center!important;}.AdaptiveMedia-video {min-height: initial!important;}.AdaptiveMedia-video:not(:hover) .PlayableMedia--gif {max-height: 20px!important; max-width: 20px!important;}.content-main {display: block!important; float: none!important; margin: 0px auto!important;}@media (min-width: 1236px) {.content-main {margin-left: auto !important; margin-right: auto !important; float: none !important;} }.js-global-actions a > .Icon {display: none!important;}.moments {display: none!important;}div.dashboard.dashboard-left {display: none!important;}div.flex-module {display: none!important;}div.home-tweet-box.tweet-box.component.tweet-user {display: none!important;}",
      "css": "/*.stream-item*/.NotJuicyEnough {\n\tbackground-color: hsl(352, 100%, 85%);\n\tpadding: 0.3em;\n\tfont-style: italic;\n\tcolor: hsla(0,0%,0%,0.4);\n\tdisplay: block;\n\ttext-align: center;\n}\n\n\n\n.AdaptiveMedia-video {\n    min-height: initial;\n}\n\n.AdaptiveMedia-video:not(:hover) .PlayableMedia--gif {\n    max-height: 20px;\n    max-width: 20px;\n}\n\n.content-main {\n    display: block;\n    float: none;\n    margin-bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 0;\n}\n\n@media (min-width: 1236px){\n  .content-main {\n    margin-left: auto !important;\n    margin-right: auto !important;\n    float: none !important;\n  }\n}\n\n.js-global-actions a > .Icon {\n    display: none;\n}\n\n.moments {\n    display: none;\n}\n\ndiv.dashboard.dashboard-left {\n    display: none;\n}\n\ndiv.flex-module {\n    display: none;\n}\n\ndiv.home-tweet-box.tweet-box.component.tweet-user {\n    display: none;\n}\n\n",
      "id": "twitter.com",
      "js": "let getStatAsInt = (el, statStr) => {\n  let statKind = el.querySelector(`.ProfileTweet-action--${statStr}`)\n  if (!statKind) return Error(`No 'action' element for ${statStr}`)\n  // Here we'll look for a bunch of different methods that Twitter uses to show the number of times a given action happened.\n  \n  let dataAttr = statKind.querySelector(`[data-tweet-stat-count]`)\n  if (dataAttr) return parseInt(dataAttr.dataset.tweetStatCount, 10)\n  \n  let isZero = statKind.querySelector('.ProfileTweet-actionCount--isZero')\n  if (isZero) return 0\n  \n  let forPresentation = statKind.querySelector('.ProfileTweet-actionCountForPresentation')\n  if (forPresentation) return parseInt(forPresentation.innerText, 10)\n  \n  return Error(`No count for action ${statStr} found.`)\n}\n\nlet replaceTweetWithPlaceholder = tweetEl => {\n  // \"Stream items\" are tweet threads/reply chains\n  let streamItem = tweetEl.closest('.stream-item')\n  let linkUrl = tweetEl.dataset.permalinkPath\n  \n  // This is the placeholder 'blocked' element we'll create to show that a tweet's been hidden\n  let blockEl = document.createElement('a')\n  blockEl.href = linkUrl\n  blockEl.innerText = '[tweet insufficiently juicy to bother displaying]'\n  blockEl.classList.add('NotJuicyEnough') // See the CSS for what these styles look like\n  \n  streamItem.innerHTML = ''\n  streamItem.appendChild(blockEl)\n}\n\nlet filterOutBoringTweets = ({\n  blockedUsersList,\n  minRatioOfRepliesPerFav = 0.5, // Minimum ratio for getting ratio'd\n  maxRatioOfRetweetsPerFav = 0.1, // Maximum ratio for a Coward's Ratio\n  minPsaRatioOfRetweetsPerFav = 0.8, // Minimum retweet ratio for a Public Service Announcement\n}={}) => {\n  let allTweets = document.querySelectorAll('.tweet')\n  allTweets.forEach(tweetEl => {\n    let owner = tweetEl.dataset.screenName\n    let ownerIsBlocked = blockedUsersList.includes(owner)\n    let id = tweetEl.dataset.tweetId\n    \n    let replies = getStatAsInt(tweetEl, 'reply')\n    let retweets = getStatAsInt(tweetEl, 'retweet')\n    let favs = getStatAsInt(tweetEl, 'favorite')\n    \n    let counts = [replies, retweets, favs]\n    counts.forEach(count => {\n      if (count instanceof Error){\n        return false // Give up; we can't find any useful info from the DOM\n      }\n    })\n    \n    let classicRatio = (replies / favs) >= minRatioOfRepliesPerFav\n    let cowardsRatio = (retweets / favs) <= maxRatioOfRetweetsPerFav\n    let psa = (retweets / favs) >= minPsaRatioOfRetweetsPerFav\n    \n    if (ownerIsBlocked){\n      if (classicRatio || cowardsRatio || psa){\n        // Tweet displays as normal\n      } else {\n        replaceTweetWithPlaceholder(tweetEl)\n      } \n    }\n  })\n}\n// TODO: Search for replies to tweets with >= 1x favs vs the OP\n\n// setInterval(()=>{\n//   filterOutBoringTweets({\n//     blockedUsersList: [\n//       'JerkVening' // Obviously  \n//     ]\n//   })\n// }, 500)\n\n",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".userPatch----switchFeedToMostRecentPopupNotification {z-index: 99999!important; position: fixed!important; top: 1em!important; left: 1em!important; border: 2px solid red!important; padding: 0.4em!important; font-size: 22px!important; font-family: monospace!important; background-color: white!important;}#pagelet_trending_tags_and_topics, #pagelet_feed_variety, #pagelet_ego_pane {display: none!important;}.sideNavItem[data-nav-item-id=\"2392950137\"], .sideNavItem[data-nav-item-id=\"140332009231\"], .sideNavItem[data-nav-item-id=\"193356651002223\"], .sideNavItem[data-nav-item-id=\"303257506544370\"], .sideNavItem[data-nav-item-id=\"1517832211847102\"], .sideNavItem[data-nav-item-id=\"280033845760645\"], .sideNavItem[data-nav-item-id=\"765518473459969\"], .sideNavItem[data-nav-item-id=\"302677536798470\"], .sideNavItem[data-nav-item-id=\"977114232337111\"], .sideNavItem[data-nav-item-id=\"232826340638308\"], .sideNavItem[data-nav-item-id=\"285571681929755\"], .sideNavItem[data-nav-item-id=\"526732794016279\"], .sideNavItem[data-nav-item-id=\"577076605805053\"], .sideNavItem[data-nav-item-id=\"645191315628772\"], .sideNavItem[data-nav-item-id=\"156203961126022\"] {display: none!important;}.pagelet[data-referrer=\"stories_pagelet_rhc\"] {!important;}",
      "css": "/* Popup notification for `switchFeedToMostRecent` so the user knows why the page is seemingly reloading. */\n.userPatch----switchFeedToMostRecentPopupNotification {\n  z-index: 99999;\n  position: fixed;\n  top: 1em;\n  left: 1em;\n  border: 2px solid red;\n  padding: 0.4em;\n  font-size: 22px;\n  font-family: monospace;\n  background-color: white;\n}\n\n\n/* Annoyances */\n#pagelet_trending_tags_and_topics, \n#pagelet_feed_variety, \n#pagelet_ego_pane { \n    display: none;\n}\n\n/* Apps/sub-pages sidebar */\n.sideNavItem[data-nav-item-id=\"2392950137\"],  /* Watch */\n.sideNavItem[data-nav-item-id=\"140332009231\"],  /* Games */\n.sideNavItem[data-nav-item-id=\"193356651002223\"],  /* Fundraisers */\n.sideNavItem[data-nav-item-id=\"303257506544370\"],  /* Memories */\n.sideNavItem[data-nav-item-id=\"1517832211847102\"],  /* Oculus */\n.sideNavItem[data-nav-item-id=\"280033845760645\"],  /* Recent ads */\n.sideNavItem[data-nav-item-id=\"765518473459969\"],  /* Crisis */\n.sideNavItem[data-nav-item-id=\"302677536798470\"],  /* Weather */\n.sideNavItem[data-nav-item-id=\"977114232337111\"],  /* Jobs */\n.sideNavItem[data-nav-item-id=\"232826340638308\"],  /* Month with friends */\n.sideNavItem[data-nav-item-id=\"285571681929755\"],  /* Gaming video */\n.sideNavItem[data-nav-item-id=\"526732794016279\"],  /* Offers */\n.sideNavItem[data-nav-item-id=\"577076605805053\"],  /* Recommendations */\n.sideNavItem[data-nav-item-id=\"645191315628772\"],  /* Discover people */\n.sideNavItem[data-nav-item-id=\"156203961126022\"]  /* Welcome */\n{\n\tdisplay: none;\n}\n\n/* Right-hand sidebar */\n.pagelet[data-referrer=\"stories_pagelet_rhc\"] {\n  \n}",
      "id": "facebook.com",
      "js": "let switchFeedToMostRecent = ()=>{\n  let getNewsFeedNav = () => document.querySelector('#universalNav [data-nav-item-id=\"4748854339\"]')\n  \n  let getSortBtn = newsFeedNav => newsFeedNav.querySelector('[role=\"button\"][aria-label=\"Sort options\"]')\n  \n  let sortMenuExists = () => document.querySelector('.uiContextualLayer [role=\"menu\"]')\n  \n  let getMostRecentBtn = () => document.querySelector('.uiContextualLayer a[aria-label=\"Most recent\"]')\n  \n  let getTopStoriesBtn = () => document.querySelector('.uiContextualLayer a[aria-label=\"Top Stories\"]')\n  \n  let newsNav, sortBtn\n  \n  let menuAppearedTick\n  let startPollingForMenu = ()=>{\n    let handlerDone = false\n    let handler = ()=>{\n      console.debug('handler')\n      if (sortMenuExists()){\n        console.debug('sort menu exists!')\n        // Menu exists\n        let mostRecentBtn = getMostRecentBtn()\n        if (mostRecentBtn && getTopStoriesBtn()){\n          console.debug('Btns exist')\n          // Both options exist\n          if (mostRecentBtn.getAttribute('aria-checked') !== 'true'){\n            // Switching to \"most recent\"\n            mostRecentBtn.click()\n            let growl = document.createElement('span')\n            growl.classList.add('userPatch----switchFeedToMostRecentPopupNotification') // up: \"user patch\"\n            growl.innerText = 'Switching News Feed to \"Most recent\"...'\n            document.body.appendChild(growl)\n          } else {\n            // Close the in-situ menu\n            sortBtn.click()\n          }\n          handlerDone = true\n        }\n      }\n      if (handlerDone) clearInterval(menuAppearedTick)\n    }\n    menuAppearedTick = setInterval(handler, 100)\n  }\n  \n  let navExistsDone = false\n  async function navExists(){\n    return await new Promise(y => {\n      let tick\n      tick = setInterval(()=>{\n        console.debug('first poll')\n        newsNav = getNewsFeedNav()\n        if (newsNav){\n          sortBtn = getSortBtn(newsNav)\n          if (sortBtn){\n            console.debug('sort btn exists')\n            navExistsDone = true\n            y(sortBtn)\n          }\n        }\n        if (navExistsDone) clearInterval(tick)\n      }, 300)\n    })\n  }\n  \n  navExists().then(sortBtn => {\n    \n    console.debug('promise resolved')\n    \n    sortBtn.click()\n    startPollingForMenu()\n  })\n}\n\nswitchFeedToMostRecent()",
      "libs": [],
      "options": {
        "altCSS": true,
        "altJS": false,
        "autoImportant": true,
        "on": true
      }
    },
    {
      "compiledCss": ".macdongle {display: none!important;}[data-campaign] {display: none!important;}",
      "css": ".macdongle {\n    display: none;\n}\n\n[data-campaign] {\n    display: none;\n}\n\n",
      "id": "theoutline.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": true,
        "altJS": false,
        "autoImportant": true,
        "on": true
      }
    },
    {
      "compiledCss": "#hot-network-questions {display: none!important;}.sidebar-related .answered-accepted {background-color: rgb(230, 255, 199)!important; color: rgb(34, 34, 34)!important;}",
      "css": "#hot-network-questions {\n    display: none;\n}\n\n.sidebar-related .answered-accepted {\n    background-color: #e6ffc7;\n    color: #222;\n}",
      "id": "superuser.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".main {margin: 0px auto!important; max-width: 60em!important; width: auto!important; font-family: sans-serif!important;}.top-stories-container, .article-trending, .site-footer, .site-header, .sidebar {display: none!important;}",
      "css": ".main {\n    margin: 0 auto;\n    max-width: 60em;\n    width: auto;\n    \n    font-family: sans-serif;\n}\n\n.top-stories-container,\n.article-trending,\n.site-footer,\n.site-header,\n.sidebar {\n\tdisplay: none;\n}",
      "id": "splinternews.com, kotaku.com, lifehacker.com, gizmodo.com, deadspin.com, jezebel.com, jalopnik.com, theavclub.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".column {width: 45em!important;}",
      "css": ".column {\n    width: 45em;\n}\n\n",
      "id": "mastodon.social",
      "js": "/* let spoilerBtns = document.querySelectorAll('.status__content__spoiler-link')\n\nlet allowedCWs = []\n\nspoilerBtns.addEventListener('click', (e)=>{\n\tif (e.target.classList.includes('status__content__spoiler-link--show-less')){\n\t\t// CW has been opened\n\t\tlet thisCW = e.target.previousElementSibling.innerHTML\n\t\tallowedCWs.push(thisCW)\n\t}\n})\n\nfor (let cw of allowedCWs){\n\t\n} */",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".avatar.width-full {height: auto!important; width: 5em !important;}.HeaderNavlink[href*=\"/marketplace\"], .HeaderNavlink[href*=\"/explore\"] {display: none!important;}pre, code, tr, p {tab-size: 2!important;}",
      "css": ".avatar.width-full {\n    height: auto;\n    width: 5em !important;\n}\n\n.HeaderNavlink[href*=\"/marketplace\"],\n.HeaderNavlink[href*=\"/explore\"]{\n  display: none;\n}\n\npre, code, tr, p {\n  tab-size: 2;\n}\n",
      "id": "github.com",
      "js": "if (['', '/'].includes(location.pathname)){ // Home page\n\nlet h4Els = document.querySelectorAll('.application-main > div .team-left-column h4')\n\nlet arrayedEls = [...h4Els]\n\narrayedEls.forEach(el => {\n  if (el.innerText.match(/discover repositories/i)){\n    let discoverSidebar = el.parentElement\n    discoverSidebar.parentElement.removeChild(discoverSidebar)\n  }\n})\n\n}",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "body, html {display: block!important; margin: 0px auto!important; max-width: 70em!important; font-size: 18px!important;}",
      "css": "body, html {\n    display: block;\n    margin: 0 auto;\n    max-width: 70em;\n    font-size: 18px;\n}\n",
      "id": "marxists.org",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "#header-quicklinks-all, #header-quicklinks-popular, #header-quicklinks-oc, header [href=\"/\"][aria-label=\"Home\"] {display: none!important;}.intent-checker {position: fixed!important; top: 0px!important; left: 0px!important; width: 100%!important; height: 100%!important; z-index: 100!important; display: flex!important; align-items: center!important; justify-content: center!important;}.intent-checker__blocker {position: absolute!important; width: 100%!important; height: 100%!important; background-color: rgb(255, 255, 255)!important;}.intent-checker__challenge {position: relative!important; z-index: 101!important; margin-right: 1em!important;}.intent-checker__proceed-btn {position: relative!important; z-index: 101!important; padding: 0.2em 0.4em!important; border: 1px solid rgb(0, 0, 0)!important;}",
      "css": "/*\n\t- Hide icon links to trashy pan-Reddit subs like \"All\", \"Popular\", and \"Original Content\". If you want them, you can just subscribe or create shortcuts to them.\n\t\n\t- Hide large Reddit logo/button (you can still reach Home by clicking the top-left dropdown button).\n*/\n#header-quicklinks-all,\n#header-quicklinks-popular,\n#header-quicklinks-oc,\nheader [href=\"/\"][aria-label=\"Home\"]{\n\tdisplay: none;\n}\n\n.intent-checker {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tz-index: 100;\n\t\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.intent-checker__blocker {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\t\n\tbackground-color: hsla(0,0%,100%,1);\n}\n\n.intent-checker__challenge {\n\tposition: relative;\n\tz-index: 101; /* Hack; should be rendered above blocker by being after it in the DOM. */\n\t\n\tmargin-right: 1em; \n}\n\n.intent-checker__proceed-btn {\n\tposition: relative;\n\tz-index: 101; /* Hack; should be rendered above blocker by being after it in the DOM. */\n\t\n\tpadding: 0.2em 0.4em;\n\tborder: 1px solid hsla(0,0%,0%,1);\n}\n\n/*iframe[src=\"https://www.reddit.com/register/\"] {*/\n/*  display: none;*/\n/*}*/",
      "id": "www.reddit.com",
      "js": "const afterSiteInit = ()=>{ // This code will wait until the site's code has finished initialising the DOM state.\n\t\n/*\n\tRemove useless 'Share' and 'Give gold' buttons from comments which add clutter.\n*/\nlet comments = document.querySelectorAll('.Comment')\nlet underBtns\ncomments.forEach((comment, i)=>{\n\t// Reddit obscures/randomises the button css-class, so we can't use that, but they only uses <button> elements.\n\tunderBtns = comment.querySelectorAll('button')\n\t\n\tunderBtns.forEach((btn, i)=>{\n\t\t// We can't use any structured-data clues so we just use the exact button content as a string\n\t\tconst isBadWord = ['Give gold'].includes(btn.innerHTML.trim())\n\t\tif (isBadWord){\n\t\t\tbtn.parentElement.removeChild(btn)\n\t\t}\n\t})\n\t\n\tlet divs = comment.querySelectorAll('div')\n\tdivs.forEach((div)=>{\n\t\tif (div.id.match(/-comment-share-menu/)){\n\t\t\tdiv.parentElement.removeChild(div)\n\t\t}\n\t})\n})\n\n}\nwindow.setTimeout(afterSiteInit, 10000) // this is a hack/guess\n\n\n\n// Create window-blocking modal to challenge yourself that checking this site is actually a good idea.\n\n// // Settings:\n// const challengeTimerMinutes = 30\n// const siteName = 'Reddit'\n// const effect = 'make you depressed and angry'\n// const mistakesMade = 3 // Update this every time you proceed and end up angry & depressed anyway.\n// const challengeText = `Is checking ${siteName} going to ${effect}, or help in some way? It has already, at least ${mistakesMade} times. \\nFor real, is it worth it?`\n\n// // State:\n// let proceedEl\n\n// const resetChallengeTimer = ()=>{\n// \tlocalStorage.setItem('intentCheckerLastConfirmed', String(Date.now()))\n// }\n\n// const hasTimerExpired = (minutes)=>{\n// \treturn Date.now() - Number(localStorage.getItem('intentCheckerLastConfirmed')) > 1000 * 60 * minutes\n// }\n\n// setInterval(()=>{\n//   if (hasTimerExpired(challengeTimerMinutes)){\n// \t  let intentCheckerEl = document.createElement('div')\n//   \tintentCheckerEl.classList.add('intent-checker')\n  \t\n//   \tlet blockingEl = document.createElement('div')\n//   \tblockingEl.classList.add('intent-checker__blocker')\n  \t\n//   \tlet challengeEl = document.createElement('span')\n//   \tchallengeEl.classList.add('intent-checker__challenge')\n//   \tchallengeEl.innerText = challengeText\n  \t\n//   \tproceedEl = document.createElement('button')\n//   \tproceedEl.innerText = 'Help in some way'\n//   \tproceedEl.classList.add('intent-checker__proceed-btn')\n//   \tproceedEl.addEventListener('click', ()=>{\n//   \t\tresetChallengeTimer()\n//   \t\tintentCheckerEl.parentElement.removeChild(intentCheckerEl)\n//   \t})\n  \t\n//   \tintentCheckerEl.appendChild(blockingEl)\n//   \tintentCheckerEl.appendChild(challengeEl)\n//   \tintentCheckerEl.appendChild(proceedEl)\n//   \tdocument.body.appendChild(intentCheckerEl)\n  \t\n//   \tproceedEl.focus()\n//   } else {\n//     // proceedEl && proceedEl.click()\n//   }\n// }, 500)\n\n// const isInPage = node => {\n//   return (node === document.body) ? false : document.body.contains(node)\n// }\n\n// let focusProceedTick = setInterval(()=>{\n//   if (isInPage(proceedEl)){\n//     proceedEl.focus()\n//   } else {\n//     clearInterval(focusProceedTick) \n//   }\n// }, 200)",
      "libs": [],
      "options": {
        "altCSS": true,
        "altJS": false,
        "autoImportant": true,
        "on": true
      }
    },
    {
      "compiledCss": "footer.menu-hello, .footer {display: none!important;}",
      "css": "footer.menu-hello,\n.footer {\n\tdisplay: none;\n}",
      "id": "cssreference.io",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "",
      "css": "",
      "id": "*.bandcamp.com",
      "js": "// NB: To get the missing space-scrolling behaviour, you can press <PgDn> (Win) or <Option+Down> (Mac) to scroll the page down by one window-height.\n\nwindow.addEventListener('load', (e)=>{\n\tdocument.addEventListener('keydown', (e)=>{\n\t\tif (e.target === document.body & e.key === ' '){ // Space button\n\t\t\tdocument.body.querySelector('.playbutton').click()\n\t\t\te.preventDefault() // We don't want space to scroll the screen down\n\t\t}\n\t}, true)\n})\n",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".header {position: relative !important;}.center {right: initial!important; height: initial!important; position: initial!important;}.dl-promo-cont, .social-cont, .intro {display: none!important;}.nonDLContentWrap {min-height: initial!important;}.page {min-height: 100vh!important;}.DLExtraInfo-wrap {margin-top: 1em!important; position: initial !important;}.DLExtraInfo-uploadLocationMap, .DLExtraInfo-upload, .DLExtraInfo-additional {display: none!important;}",
      "css": ".header {\n  position: relative !important;\n}\n\n.center {\n  position: relative;\n  right: initial;\n  height: initial;\n  position: initial;\n}\n\n/* Intro just repeats the content already in the header. */\n.dl-promo-cont,\n.social-cont,\n.intro {\n  display: none;\n}\n\n.nonDLContentWrap {\n  min-height: initial;\n}\n\n.page {\n  min-height: 100vh;\n}\n\n.DLExtraInfo-wrap {\n  margin-top: 1em;\n  position: initial !important;\n}\n\n.DLExtraInfo-uploadLocationMap,\n.DLExtraInfo-upload,\n.DLExtraInfo-additional {\n  display: none;\n}",
      "id": "mediafire.com",
      "js": "let tryingTick\nlet clickedDownload = false\n\nlet tryRemovingAdModal = ()=>{\n\t\n\tlet adblockEl = document.querySelector('.lightbox.on')\n\tlet downloadBtnEl = document.querySelector('#download_link [aria-label*=\"Download\"]')\n\t\n\tif (adblockEl){\n\t\tadblockEl.parentElement.removeChild(adblockEl)\n\t\tif (!clickedDownload){\n\t\t  downloadBtnEl.click()\n\t\t  clickedDownload = true\n\t\t}\n\t\tclearInterval(tryingTick)\n\t}\n}\n\ntryingTick = setInterval(tryRemovingAdModal, 2000)",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "",
      "css": "",
      "id": "jsfiddle.net",
      "js": "let antiAdBlockingEl = document.querySelector('#keep-us-running')\nantiAdBlockingEl.parentElement.removeChild(antiAdBlockingEl)",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "#hot-network-questions, #newsletter-ad, .community-bulletin, .left-sidebar {display: none!important;}#content {border-left-width: 0px !important;}.sidebar-related .answered-accepted {background-color: rgb(230, 255, 199) !important; color: rgb(34, 34, 34) !important;}",
      "css": "/* These are all effectively just ads with capitalist motivations. */\n#hot-network-questions,\n#newsletter-ad,\n.community-bulletin,\n.left-sidebar {\n    display: none;\n}\n\n/* Left-border was intended to separate now-missing sidebar. */\n#content {\n  border-left-width: 0 !important;\n}\n\n/* Original colouring too intense for what it's representing and distracts from main content reading. !i needed to overcome high specificity. */\n.sidebar-related .answered-accepted {\n    background-color: #e6ffc7 !important;\n    color: #222 !important;\n}\n\n",
      "id": "*.stackexchange.com, stackoverflow.com, superuser.com, askubuntu.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "[aria-label=\"Create\"] {display: none !important;}",
      "css": "[aria-label=\"Create\"] {\n  display: none !important;\n}",
      "id": "calendar.google.com",
      "js": "  ",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "",
      "css": "",
      "id": "*.libsyn.com",
      "js": "// NB: To get the missing space-scrolling behaviour, you can press <PgDn> (Win) or <Option+Down> (Mac) to scroll the page down by one window-height.\n\nwindow.addEventListener('load', (e)=>{\n\tdocument.addEventListener('keydown', (e)=>{\n\t\tif (e.target === document.body & e.key === ' '){ // Space button\n\t\t  let playPauseContainer = document.querySelector('.play-pause')\n\t\t  let playBtn = document.querySelector('#play-player')\n\t\t  let pauseBtn = document.querySelector('#pause-player')\n\t\t\tplayPauseContainer.click()\n\t\t\te.preventDefault() // We don't want space to scroll the screen down\n\t\t}\n\t}, true)\n})\n",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".contributions__epic {display: none!important;}.new-header__cta-bar {display: none!important;}.cta-bar__message {display: none!important;}#aus_fairfax, [data-component=\"aus_fairfax\"] {display: none!important;}",
      "css": "/*\n  Ads for \"support the Guardian\" etc\n  \n  The Guardian is a privately-owned cheerleader of neoliberal capitalism; a body that exists to make profit for its owners and to shape the world's ideology as the owners desire. In this sense, it is functionally identical to all other privately-owned media outlets - The New York Times, CNN, FOX, The Australian, The Washington Post, Al Jazeera etc. What they say and publish are all completely autocratically controlled by private owners, who are unanimously extremely rich capitalists. It is fundamentally a destructive and anti-social entity that deserves to be completely removed. \"Journalism\" is not per se an important thing to support, as all journalism - as with all human work - is intrinsically subjective. *What* journalists choose to feature or choose to omit, and *how* they contextualise & analyse those events, is a political position. This is true no matter how much they try to obfuscate that, and put up a veneer of objectivity through the use of neutral-sounding language, or by positioning themselves at what they consider to be the political \"centre\". \n*/\n\n/* End-of-article ad */\n.contributions__epic {\n  display: none;\n}\n\n/* Header ad */\n.new-header__cta-bar {\n  display: none;\n}\n\n/* Footer ad */\n.cta-bar__message {\n  display: none;\n}\n\n/* In-content ad */\n#aus_fairfax,\n[data-component=\"aus_fairfax\"] {\n  display: none;\n}",
      "id": "theguardian.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".zebra tbody tr {background-color: rgb(255, 255, 255) !important;}.zebra th {background-color: rgb(238, 255, 235) !important;}",
      "css": ".zebra tbody tr {\n  background-color: #fff !important;\n}\n\n.zebra th {\n  background-color: hsl(109, 100%, 96%) !important;\n}",
      "id": "nearlyfreespeech.net",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "#mw-panel {display: none!important;}#content {border-left-width: 0px!important; border-right-width: 0px!important; margin-left: 0px !important;}#mw-page-base {background: none rgb(255, 255, 255)!important;}.vectorTabs li {background: none!important;}#firstHeading {display: block!important; max-width: 55rem!important; margin-left: auto!important; margin-right: auto!important;}#bodyContent {max-width: 55rem!important; margin-left: auto!important; margin-right: auto!important;}#mw-head-base {margin-top: initial!important; height: initial!important;}#left-navigation, #right-navigation {margin-left: initial!important; float: none!important;}#left-navigation {margin-right: 1em!important;}",
      "css": "#mw-panel { \n  /* LH nav sidebar */\n  display: none;\n}\n\n\n#content {\n  margin-left: 0 !important;\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n#mw-page-base {\n  background: none;\n  background-color: hsla(0,0%,100%,1);\n}\n\n.vectorTabs li {\n  background: none;\n}\n\n#firstHeading {\n  display: block;\n  max-width: 55rem;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n#bodyContent {\n  max-width: 55rem;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n#mw-head-base {\n  margin-top: initial;\n  height: initial;\n}\n\n#left-navigation, #right-navigation {\n  margin-left: initial;\n  float: none;\n}\n\n#left-navigation {\n  margin-right: 1em;\n}",
      "id": "wikipedia.org",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".banner, .navbar {opacity: 0!important; transition: opacity 200ms ease 0s!important;}.navbar {opacity: 0.5!important;}.banner:hover, .navbar:hover, .banner:focus, .navbar:focus {opacity: 1!important;}",
      "css": ".banner, .navbar {\n  opacity: 0;\n  transition: opacity 200ms;\n}\n\n.navbar {\n  opacity: 0.5;\n}\n\n.banner:hover, .navbar:hover,\n.banner:focus, .navbar:focus {\n  opacity: 1;\n}\n",
      "id": "thebaffler.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "button[data-action-source=\"post_share_widget\"] {display: none!important;}.js-postLeftSidebar, .js-postShareWidget {display: none !important;}",
      "css": "/* \"Share\" widget */\nbutton[data-action-source=\"post_share_widget\"] {\n\tdisplay: none;\n}\n\n.js-postLeftSidebar, .js-postShareWidget {\n  display: none !important;\n}",
      "id": "medium.*.org, medium.com, hackernoon.com",
      "js": "// Fixed header\nlet metabars = document.querySelectorAll('.metabar')\nfor (let bar of [...metabars]){\n  bar.classList.remove('u-fixed')\n}\n\n// Annoyance overlay\nlet tick\ntick = setInterval(()=>{\n  let overlay = document.querySelector('.overlay')\n  if (overlay){\n    overlay.parentElement.removeChild(overlay)\n    clearInterval(tick)  \n  }\n}, 1000)\n\n// Sticky footer\nlet tick2\ntick2 = setInterval(()=>{\n  let stickyFooter = document.querySelector('.js-stickyFooter')\n  if (stickyFooter){\n    stickyFooter.parentElement.removeChild(stickyFooter)\n    clearInterval(tick2)  \n  }\n  \n}, 1000)",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "[class^=\"header__headerMain\"] {display: none!important;}#upsell {display: none!important;}",
      "css": "[class^=\"header__headerMain\"]{\n  display: none;\n}\n\n#upsell {\n  display: none;\n}",
      "id": "npmjs.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".header__navMenuItem[href=\"/discover\"] {display: none!important;}.header__proUpsell {display: none!important;}.statsBadge__upsell {display: none!important;}a[href^=\"/pro\"] {display: none!important;}.streamSidebar {opacity: 0.3!important; transition: opacity 200ms ease 0s!important;}.streamSidebar:hover, .streamSidebar:active, .streamSidebar:focus {opacity: 1!important;}",
      "css": ".header__navMenuItem[href=\"/discover\"]{\n  display: none;\n}\n\n.header__proUpsell {\n  display: none;\n}\n\n.statsBadge__upsell {\n  display: none;\n}\n\na[href^=\"/pro\"] {\n  display: none;\n}\n\n.streamSidebar {\n  opacity: 0.3;\n  transition: opacity 200ms;\n}\n.streamSidebar:hover,\n.streamSidebar:active,\n.streamSidebar:focus {\n  opacity: 1;\n}",
      "id": "soundcloud.com",
      "js": "let d = document\n\nsetInterval(()=>{\n  let cookieAlert = d.querySelector('.sc-link-dark[href=\"/pages/cookies\"]').closest('.announcements')\n  if (cookieAlert){\n    console.log(cookieAlert)\n    cookieAlert.parentElement.removeChild(cookieAlert)      \n  }\n}, 1000)\n\n",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "body.au {background-image: none!important;}#shade {display: none!important;}",
      "css": "body.au {\n  background-image: none;\n}\n\n#shade {\n  display: none;\n}",
      "id": "com.au",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".sponsor-top, .share-block, .pantheon, .a-book-apart, .patreon-bubble {display: none!important;}",
      "css": ".sponsor-top,\n.share-block,\n.pantheon,\n.a-book-apart,\n.patreon-bubble {\n  display: none;\n}",
      "id": "alistapart.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".domainEmphasis_domain {font-weight: bold!important; color: rgb(0, 77, 24)!important; font-size: 1.15em!important; margin-right: 0.5em!important; margin-left: 0.3em!important;}.domainEmphasis_protocol {opacity: 0.5!important;}.domainEmphasis_nonSecure {color: red!important; font-weight: bold!important; opacity: 1!important;}.blockedResult {font-weight: bold!important; padding: 0.2em 0.4em!important; background: rgba(255, 0, 0, 0.17)!important; color: black!important; height: auto!important;}.blockedResult_preface {font-weight: normal!important;}.blockedEntireResult {margin-bottom: 1em !important; margin-top: 1em !important; padding-bottom: 0px !important; padding-top: 0px !important;}",
      "css": ".domainEmphasis_domain {\n\tfont-weight: bold;\n\tcolor: hsl(139, 100%, 15%);\n\tfont-size: 1.15em;\n\tmargin-right: 0.5em;\n\tmargin-left: 0.3em;\n}\n.domainEmphasis_protocol {\n  opacity: 0.5;\n}\n.domainEmphasis_nonSecure {\n  color: red;\n  font-weight: bold;\n  opacity: 1;\n}\n\n\n.blockedResult {\n  font-weight: bold;\n  padding: 0.2em 0.4em;\n  background: hsla(0, 100%, 50%, 0.17);\n  color: black;\n  height: auto;\n}\n.blockedResult_preface {\n  font-weight: normal;\n}\n\n.blockedEntireResult {\n  margin-bottom: 1em !important;\n  margin-top: 1em !important;\n  padding-bottom: 0 !important;\n  padding-top: 0 !important;\n}",
      "id": "www.google.com",
      "js": "// Strings or regexes\nlet blockList = [\n  'w3schools.com', \n  'quora.com',\n  'forbes.com'\n].map(str => str.replace('.', '\\.'))\n\nlet alreadyDone = false\n\nconst isValidUrl = str => {\n  try {\n    new URL(str)\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\n// Visually emphasize the domain part of the URL for quick skimreading\nlet emphasiseDomain = citeEl => {\n  let matched = citeEl.innerText.match(/[^\\s]+/)\n  let urlPart = matched && matched[0] // Text until whitespace\n  if (urlPart){\n    if (!isValidUrl(urlPart)) urlPart = 'http://' + urlPart\n    if (!isValidUrl(urlPart)){\n      console.warn(urlPart)\n      return false\n    }\n    let urlObj = new URL(urlPart)\n    let nonSecure = urlObj.protocol !== 'https:' ? 'domainEmphasis_nonSecure' : ''\n    let hash = urlObj.hash ? '#' + urlObj.hash : ''\n    let search = urlObj.search ? '?' + urlObj.search : ''\n    let newHtml = `<span class=\"domainEmphasis\"><span class=\"domainEmphasis_protocol ${nonSecure}\">${urlObj.protocol}</span><span class=\"domainEmphasis_domain\">${urlObj.host}</span>${urlObj.pathname}${hash}${search}</span>`\n    citeEl.innerHTML = citeEl.innerHTML.replace(urlPart, newHtml)\n  }\n}\n\nlet hideBlocked = citeEl => {\n  for (let str of blockList){\n    if (citeEl.innerText.match(str)){\n      let resultEl = citeEl.closest('[data-hveid], [data-ved]').parentElement\n      \n      resultEl.innerHTML = `<div class=\"blockedResult\"><span class=\"blockedResult_preface\">BLOCKED:</span> ${str}</div>`\n      \n      // If this is the whole result, take away the margins from the parent\n      // let isAlone = [...resultEl.parentElement.children].length === 1\n      // if (isAlone){\n      resultEl.classList.add('blockedEntireResult')\n      // }\n    }  \n  }\n}\n\nlet processDom = ()=>{\n  let cites = [...document.querySelectorAll('cite')]\n\n  for (let citeEl of cites){\n    if (citeEl.dataset.alreadyDone){ return }\n    \n    emphasiseDomain(citeEl)\n    \n    // Hide results from domains we don't want.\n    hideBlocked(citeEl)\n    \n    citeEl.dataset.alreadyDone = 'true'\n  }\n  \n  alreadyDone = true\n}\n\nsetInterval(()=>{\n  processDom()\n}, 300)\n\ndocument.addEventListener('DOMContentLoaded', processDom)\ndocument.addEventListener('load', processDom)\nif (['interactive', 'complete'].includes(document.readyState)){ processDom()\n}",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".magazine-bar, .socialNotification, .social-notification, .nav-favorites, .nav-profile, .recipe-navbar, .pol-sale-container, .directions--section__right-side, .share, #shareRecipe {display: none !important;}",
      "css": ".magazine-bar, \n.socialNotification, \n.social-notification,\n.nav-favorites,\n.nav-profile,\n.recipe-navbar,\n.pol-sale-container,\n.directions--section__right-side,\n.share,\n#shareRecipe {\n  display: none !important;\n}",
      "id": "www.allrecipes.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".is-sticky {position: relative !important;}",
      "css": ".is-sticky {\n  position: relative !important;\n}",
      "id": "www.scientificamerican.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".EasyLinksContainer {position: fixed!important; top: 1em!important; left: 1em!important; background-color: white!important; color: rgb(34, 34, 34)!important; padding: 1em!important; height: auto!important;}.EasyLinksContainer_closeBtn {border: 1px solid black!important; margin-top: 1em!important; cursor: pointer!important; padding: 0.2em 0.4em!important; border-radius: 3px!important;}.EasyLinksContainer_closeBtn:hover {background-color: rgb(255, 204, 204)!important;}.EasyAudioLink {!important;}.EasyAudioLink a {color: blue!important; display: block!important;}.EasyAudioLink_copyText {display: block!important; width: 100%!important;}",
      "css": ".EasyLinksContainer {\n  position: fixed;\n  top: 1em;\n  left: 1em;\n  background-color: white;\n  color: #222;\n  padding: 1em;\n  height: auto;\n}\n\n.EasyLinksContainer_closeBtn {\n  border: 1px solid black;\n  margin-top: 1em;\n  cursor: pointer;\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n}\n.EasyLinksContainer_closeBtn:hover {\n  background-color: hsl(0, 100%, 90%);\n}\n\n.EasyAudioLink {\n  \n}\n.EasyAudioLink a {\n  color: blue;\n  display: block;\n}\n.EasyAudioLink_copyText {\n  display: block;\n  width: 100%;\n}",
      "id": "anchor.fm",
      "js": "let audioEls = document.getElementsByTagName('audio')\n\n\n\nlet linksContainerEl = document.createElement('div')\nlinksContainerEl.classList.add('EasyLinksContainer')\ndocument.body.appendChild(linksContainerEl)\n\nlet makeAudioLink = url => {\n  let containerEl = document.createElement('div')\n  containerEl.classList.add('EasyAudioLink')\n  let linkEl = document.createElement('a')\n  linkEl.href = url\n  let urlBits = url.split('/')\n  let dateUploaded = urlBits[urlBits.length - 2]\n  let pageUrlBits = location.pathname.split('/')\n  downloadFileName = dateUploaded + ' ' + pageUrlBits[pageUrlBits.length - 1] + `.m4a`\n  linkEl.download = downloadFileName\n  linkEl.innerText = url\n  let copyInputEl = document.createElement('input')\n  copyInputEl.classList.add('EasyAudioLink_copyText')\n  copyInputEl.value = downloadFileName\n  copyInputEl.addEventListener('click', function(e){\n    this.select()\n  })\n  containerEl.appendChild(linkEl)\n  containerEl.appendChild(copyInputEl)\n  linksContainerEl.appendChild(containerEl)\n}\n\n;[...audioEls].forEach((val, i)=>{\n  makeAudioLink(val.src)\n})\n\nlet closeBtnEl = document.createElement('button')\ncloseBtnEl.classList.add('EasyLinksContainer_closeBtn')\ncloseBtnEl.innerText = 'fuck off you scoundrel'\ncloseBtnEl.addEventListener('click', ()=>{\n  containerEl.parentElement.removeChild(containerEl)\n})\nlinksContainerEl.appendChild(closeBtnEl)",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".support-us-promo {display: none!important;}",
      "css": ".support-us-promo {\n  display: none;\n}",
      "id": "www.rockpapershotgun.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": ".buy-book-button {display: none!important;}",
      "css": ".buy-book-button {\n  display: none;\n}",
      "id": "javascript.info",
      "js": "let removeShareLinks = ()=>{\n  let titles = document.querySelectorAll('.sidebar__section-title')\n  console.debug(titles)\n  \n  let shareTitle = [...titles].filter(el => el.innerText.match(/^\\s*Share\\s*$/))[0]\n  \n  console.debug(shareTitle)\n  \n  let shareSection = shareTitle.closest('.sidebar__section')\n  shareSection.parentElement.removeChild(shareSection)  \n}\n\nsetTimeout(removeShareLinks, 1000)",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "#mc_embed_signup input[type=\"email\"]::placeholder {color: rgba(255, 255, 255, 0.5)!important;}",
      "css": "#mc_embed_signup input[type=\"email\"]::placeholder {\n  color: hsla(0,0%,100%,0.5);\n}",
      "id": "redflag.org.au",
      "js": "document.getElementById('mce-EMAIL').setAttribute('placeholder', 'your email')",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "td.ind {background-image: repeating-linear-gradient(90deg, transparent 0px, rgba(0, 0, 0, 0.2) 1px, transparent 1px, transparent 40px)!important;}",
      "css": "td.ind {\n  /* Show indent level (40px interval) */\n  background-image: repeating-linear-gradient(90deg, transparent 0px, hsla(0,0%,0%,0.2) 1px, transparent 1px, transparent 40px);\n}",
      "id": "news.ycombinator.com",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    },
    {
      "compiledCss": "#cu-identity, a[href*=\"cornell.edu\"], .sponsors {display: none!important;}",
      "css": "#cu-identity,\na[href*=\"cornell.edu\"],\n.sponsors {\n  display: none;\n}\n\n/*#support-ack*/",
      "id": "arxiv.org",
      "js": "",
      "libs": [],
      "options": {
        "altCSS": false,
        "altJS": false,
        "autoImportant": false,
        "on": true
      }
    }
  ]
}